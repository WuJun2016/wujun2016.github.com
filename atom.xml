<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-25T01:09:41.774Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>吴俊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>markdown语法</title>
    <link href="http://yoursite.com/2018/07/25/markdown/"/>
    <id>http://yoursite.com/2018/07/25/markdown/</id>
    <published>2018-07-25T00:12:36.620Z</published>
    <updated>2018-07-25T01:09:41.774Z</updated>
    
    <content type="html"><![CDATA[<pre><code>react相关笔记整理</code></pre><a id="more"></a><p><img src="/images/2月/1.jpg" alt=""></p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>1.标题 ##<br>    eg: ## 这是一个耳机标题   (后面保持空格) 一共有6级</p><p>2.大标题 ====</p><p>  小标题 ————————</p><p>3.TOC [TOC]<br>注：根据标题生成目录，兼容性一般</p><p>4.引用<br>代码1(单行式)</p><blockquote><p>hello world!</p></blockquote><p>代码2(多行式)</p><blockquote><p>hello world!<br>hello world!<br>hello world! </p></blockquote><p>6.代码块<br>注：与上行距离一空行</p><p>代码1(<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注：用```生成块</span><br></pre></td></tr></table></figure></p><p><div><br>    <div></div><br>    <div></div><br>    <div></div><br></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">代码3(自定义语法)</span><br><span class="line">注：根据不同的语言配置不同的代码着色</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">var num = 0;</span><br><span class="line">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">    num+=i;</span><br><span class="line">&#125;</span><br><span class="line">console.log(num);</span><br></pre></td></tr></table></figure></p><p>7.插入链接<br>代码1(内链式)<br>注：{:target=”_blank”}跳转方式兼容性一般 ，多数第三方平台不支持跳转</p><p><a href="http://www.baidu.com/&quot; 百度一下&quot;" target="_blank" rel="noopener">百度1</a>{:target=”_blank”}   </p><p>8.插入图片<br>代码1(内链式)</p><p><img src="./01.png" alt="" title="描述"></p><p>9.插入图片带有链接<br>代码<br><a href="http://www.baidu.com" target="_blank" rel="noopener"><img src="./01.png" alt="" title="百度"></a>{:target=”_blank”}        // 内链式</p><p>11.序表<br>代码1(有序)</p><p>注：序列.后 保持空格</p><ol><li>one</li><li>two</li><li>three<br>演示</li></ol><p>代码2(无序)</p><ul><li>one</li><li>two</li><li>three</li></ul><p>代码4(序表嵌套代码块)<br>注：换行+两个Tab</p><ul><li><p>one</p><p>  var a = 10;     // 与上行保持空行并 递进缩进</p></li></ul><p>12.任务列表<br>注：兼容性一般 要隔开一行</p><p>代码</p><p>这是文字……</p><ul><li style="list-style: none"><input type="checkbox" checked> 选项一</li><li style="list-style: none"><input type="checkbox"> 选项二  </li><li style="list-style: none"><input type="checkbox"> [选项3]</li></ul><p>20.分隔符<br>注：最少三个 — 或 <em>**或 </em> <em> </em></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;react相关笔记整理
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>vscode插件及配置记录</title>
    <link href="http://yoursite.com/2018/07/05/vscode%E6%8F%92%E4%BB%B6%E5%8F%8A%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/07/05/vscode插件及配置记录/</id>
    <published>2018-07-05T14:15:29.992Z</published>
    <updated>2018-07-05T14:29:34.332Z</updated>
    
    <content type="html"><![CDATA[<pre><code>vscode插件及详细配置</code></pre><a id="more"></a><p><img src="/images/2月/3.jpg" alt=""></p><h2 id="在VS-Code中"><a href="#在VS-Code中" class="headerlink" title="在VS Code中"></a>在VS Code中</h2><p>code runner：可以安装后直接运行在node 环境中，然后在vscode中输出文件的结果 (ctrl+Alt+n)<br>Auto Close Tag：匹配标签，关闭对应的标签。<br>Auto Rename Tag：改变标签的时候同时改动开闭合标签</p><h3 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;workbench.colorTheme&quot;: &quot;Visual Studio Light&quot;,</span><br><span class="line">    &quot;editor.fontSize&quot;: 18,</span><br><span class="line"></span><br><span class="line">    // react标签自动补齐</span><br><span class="line">    &quot;emmet.includeLanguages&quot;: &#123;</span><br><span class="line">        &quot;javascript&quot;: &quot;javascriptreact&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;explorer.confirmDelete&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;vscode插件及详细配置
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>mongodb配置</title>
    <link href="http://yoursite.com/2018/07/05/mongodb%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/07/05/mongodb配置/</id>
    <published>2018-07-05T14:05:51.914Z</published>
    <updated>2018-07-05T14:14:23.415Z</updated>
    
    <content type="html"><![CDATA[<pre><code>mongodb详细配置</code></pre><a id="more"></a><p><img src="/images/2月/3.jpg" alt=""></p><h2 id="1-启动MongoDB服务-data-db这两个文件夹要自己新建"><a href="#1-启动MongoDB服务-data-db这两个文件夹要自己新建" class="headerlink" title="1.启动MongoDB服务   \data\db这两个文件夹要自己新建"></a>1.启动MongoDB服务   \data\db这两个文件夹要自己新建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath E:\MongoDB\data\db</span><br></pre></td></tr></table></figure><p><a href="http://localhost:27017" target="_blank" rel="noopener">http://localhost:27017</a> 完了试试可不可以访问</p><h2 id="2-本地windows-mongodb-服务配置"><a href="#2-本地windows-mongodb-服务配置" class="headerlink" title="2.本地windows mongodb 服务配置"></a>2.本地windows mongodb 服务配置</h2><h3 id="2-1-先在data文件下创建一个新文件夹log，然后Mongodb新建配置文件mongo-config"><a href="#2-1-先在data文件下创建一个新文件夹log，然后Mongodb新建配置文件mongo-config" class="headerlink" title="2.1 先在data文件下创建一个新文件夹log，然后Mongodb新建配置文件mongo.config"></a>2.1 先在data文件下创建一个新文件夹log，然后Mongodb新建配置文件mongo.config</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dbpath=E:\MongoDB\data\db #数据库路径</span><br><span class="line">logpath=E:\MongoDB\data\log\mongodb.log #日志输出文件路径</span><br><span class="line">logappend=true #错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件</span><br><span class="line">journal=true #启用日志文件，默认启用</span><br><span class="line">quiet=true #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span><br><span class="line">port=27017 #端口号 默认为27017</span><br></pre></td></tr></table></figure><h3 id="2-2-用管理员身份打开cmd-在环境的bin目录下运行"><a href="#2-2-用管理员身份打开cmd-在环境的bin目录下运行" class="headerlink" title="2.2 用管理员身份打开cmd: 在环境的bin目录下运行"></a>2.2 用管理员身份打开cmd: 在环境的bin目录下运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --logpath E:\MongoDB\logs\mongodb.log --logappend --dbpath E:\MongoDB\data --directoryperdb --serviceName MongoDB --install</span><br></pre></td></tr></table></figure><p>如果注册表因为之前没安装了没装成功的话，运行net start MongoDB 可以会报错， 可以先 运行 sc delete MongoDB 然后再执行2.2</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;mongodb详细配置
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>react</title>
    <link href="http://yoursite.com/2018/06/23/react%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2018/06/23/react相关/</id>
    <published>2018-06-23T11:31:47.182Z</published>
    <updated>2018-07-04T07:00:08.679Z</updated>
    
    <content type="html"><![CDATA[<pre><code>react相关笔记整理</code></pre><a id="more"></a><p><img src="/images/2月/1.jpg" alt=""></p><h2 id="第一节-redux"><a href="#第一节-redux" class="headerlink" title="第一节 redux"></a>第一节 redux</h2><p>1.<br>首先通过 reducer新建store, store.getState()获取状态<br>可以通过 store.dispatch(action) 修改状态,<br>reducer函数接受state,action,返回新的state,可以通过subscribe()监听每次的修改</p><p>store.dispatch方法传递给组件,内部可以调用修改状态<br>subscribe订阅render函数,每次修改都重新渲染<br>redux相关内容,移到单独的文件index.redux.js单独管理</p><p>redux 处理异步,需要redux-thunk插件:使用thunk时</p><ol><li>import { createStore , applyMiddleware } from ‘redux’;</li><li>const store = createStore(counter,applyMiddleware(thunk));</li></ol><p>npm install redux-devtools-extension 并且开启调试:使用如下</p><ol><li>import { createStore , applyMiddleware, compose } from ‘redux’;</li><li>const store = createStore(counter,compose(<pre><code>applyMiddleware(thunk),window.devToolsExtension ? window.devToolsExtension():f=&gt;f</code></pre>));</li></ol><p>react-redux 优雅的链接redux和react:使用如下</p><ol><li>npm install react-redux –save</li><li>忘记subscribe ,记住reducer,action 和 dispatch即可</li><li>react-redux 提供了Provider和connect两个接口</li></ol><p>没使用修饰器时:<br>const setProps = (state)=&gt;{<br>    return { num:state }<br>}<br>const actionCreators = { addGun, removeGun ,addGunAsync };<br>App = connect(setProps,actionCreators)(App)</p><p>使用修饰器时:<br>要先安装 npm isntall babel-plugin-transform-decorators-legacy –save-dev<br>并且在package.json的babel中配置,<br>“plugins”:[“transform-decorators-legacy”]</p><p>因为creat-react-app脚手架不支持修饰器所以还要装<br>npm install babel-preset-stage-2 –save-dev<br>npm install babel-preset-react-native-stage-0 –save-dev<br>并且在根目录下创建.babelrc<br>// react<br>{<br>  “presets”: [“react-native-stage-0/decorator-support”]<br>}<br>不用配置”plugins”:[“transform-decorators-legacy”]</p><h2 id="第二节-react-router4"><a href="#第二节-react-router4" class="headerlink" title="第二节 react-router4"></a>第二节 react-router4</h2><p>npm install react-router-dom –save</p><p>核心方法<br>import { BrowserRouter, Link, Route, Redirect, Switch } from ‘react-router-dom’</p><p>BrowserRouter 包裹了整个路由 (还用一个叫HashRouter)<br>Route 路由对应要渲染的组件,可以嵌套使用<br>Link  跳转专用,相当于a标签</p><browserrouter><br>    <div><br>        <link to="/">App // 点击跳转到指定路由<br>        <link to="/one">one<br>        <link to="/two">two<br>        <route path="/" exact="" component="{App}/"> // 该指定路由渲染的组件<br>        <route path="/One" component="{One}/"><br>        <route path="/Two" component="{Two}/"><br>    </route></route></route></div><br></browserrouter> <p>// BrowserRouter下只能有一个子元素<br>// exact精准匹配</p><p>url 路由路径参数传递到模板 用baseUrl/:id类似格式，组件中用match.params.id接收。<br>Redirect组件是跳转用的  <redirect to="/test"><br>Switch 只选择一个子Route组件</redirect></p><h2 id="第三节-react基础"><a href="#第三节-react基础" class="headerlink" title="第三节 react基础"></a>第三节 react基础</h2><p>1.组件周期<br>初始化周期: componentWillMount() render() componentDidMount()<br>组件重新渲染周期:<br>组件卸载声明周期:</p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;react相关笔记整理
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>课程笔记</title>
    <link href="http://yoursite.com/2018/05/28/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/05/28/课程笔记/</id>
    <published>2018-05-28T14:38:24.337Z</published>
    <updated>2018-07-25T04:53:50.729Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>1.盒模型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">标准盒子模型：    宽度=内容的宽度（content）+ border + padding + margin</span><br><span class="line">低版本IE盒子模型：宽度=内容宽度（content+border+padding）+ margin </span><br><span class="line">// 通常说的“IE盒子模型”指的是IE5.5,IE6,IE7及以后,盒模型都为 content-box</span><br><span class="line">// 个人感觉IE盒模型更利于开发, 所以可以把盒子属性设置为 </span><br><span class="line">// box-sizing:border-box;  IE9及以上都支持</span><br></pre></td></tr></table></figure></p><p>2.选择器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">相邻选择器 h1 + p   // 选择所有紧接着&lt;h1&gt;元素之后的&lt;p&gt;元素</span><br><span class="line">子选择器   ul &gt; li  // 当li是ul的子元素则选中li,否则不选中</span><br><span class="line">后代选择器 li a</span><br><span class="line">属性选择器 a[rel=“external”]、a[target]、 </span><br><span class="line">         [title~=flower] 择标题属性包含单词&quot;flower&quot;的所有元素</span><br><span class="line">         [lang|=en]选择一个lang属性的起始值=&quot;EN&quot;的所有元素</span><br><span class="line">[attribute^=value]a[src^=&quot;https&quot;]选择每一个src属性的值以&quot;https&quot;开头的元素</span><br><span class="line">[attribute$=value]a[src$=&quot;.pdf&quot;]选择每一个src属性的值以&quot;.pdf&quot;结尾的元素</span><br><span class="line">[attribute*=value]a[src*=&quot;runoob&quot;]选择每一个src属性的值包含子字符串&quot;runoob&quot;的元素</span><br><span class="line"></span><br><span class="line">伪类选择器 a:hover, li:nth-child // 伪类表示一个状态   </span><br><span class="line"></span><br><span class="line">element1~element2 选择器匹配出现在 element1 后面(只是后面,不是其里面)的 element2</span><br><span class="line">element1 和 element2 这两种元素必须具有相同的父元素(两个都是其父元素的子元素),但 element2 不必紧跟在 element1 的后面 (和后代选择器不是一回事)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">可继承的属性：font-size, font-family, color</span><br><span class="line">优先级（就近原则）：!important &gt; [ id &gt; class &gt; tag ]</span><br><span class="line">!important 比内联优先级高</span><br><span class="line"></span><br><span class="line">:focus</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LVHA</span><br><span class="line">:link</span><br><span class="line">:visited</span><br><span class="line">:hover</span><br><span class="line">:active  点击的时候</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">元素选择符： 1</span><br><span class="line">class选择符： 10</span><br><span class="line">id选择符：100</span><br><span class="line">元素标签：1000</span><br><span class="line"></span><br><span class="line">!important声明的样式优先级最高，如果冲突再进行计算。</span><br><span class="line">如果优先级相同，则选择最后出现的样式。</span><br><span class="line">继承得到的样式的优先级最低。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:first-letter 用来指定元素第一个字母的样式</span><br><span class="line">:first-line   用来指定选择器第一行的样式</span><br><span class="line">:first-child  选择当前元素是否是其父元素的第一个子节点,是则选中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:before 选择器向选定的元素前插入内容  使用content 属性来指定要插入的内容</span><br><span class="line">:after  选择器向选定的元素之后插入内容 使用content 属性来指定要插入的内容 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:first-child 匹配的是某父元素的第一个子元素,可以说是结构上的第一个子元素。</span><br><span class="line">:first-of-type 匹配的是该类型的第一个,类型是指什么呢，就是冒号前面匹配到的东西.</span><br><span class="line">比如 p:first-of-type 就是指所有p元素中的第一个。这里不再限制是第一个子元素了,只要是该类型元素的第一个就行了,当然这些元素的范围都是属于同一级的,也就是同辈的。</span><br><span class="line"></span><br><span class="line">同样类型的选择器 :last-child only-child , :last-of-type、:only-of-type :nth-child(n)  和  :nth-of-type(n) 也可以这样去理解。</span><br><span class="line"></span><br><span class="line">:only-of-type 选择器匹配属于同类型中唯一同级元素 //同类型 唯一  类型指冒号前的元素</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p:nth-child(2) 选中p元素是其父元素的第二个子元素的p元素 (所有满足条件的p元素)</span><br><span class="line">:nth-last-child() 倒数</span><br><span class="line">:nth-last-of-type(n)</span><br><span class="line"></span><br><span class="line">:empty选择器选择每个没有任何子级的元素(包括文本节点)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:target 选择器可用于当前活动的target元素的样式。</span><br><span class="line">锚的名称是在一个文件中链接到某个元素的URL。元素被链接到目标元素</span><br><span class="line"></span><br><span class="line">input[type=&quot;text&quot;]:enabled</span><br><span class="line">input[type=&quot;text&quot;]:disabled</span><br><span class="line">input:checked</span><br><span class="line">:not(p) 排除指定元素</span><br><span class="line"></span><br><span class="line">input:out-of-range</span><br><span class="line"></span><br><span class="line">:out-of-range 选择器用于标签的值在指定区间之外时显示的样式。</span><br><span class="line">注意： :out-of-range 选择器只作用于能指定区间之外值的元素，例如 input 元素中的 min 和 max 属性。</span><br><span class="line">input:in-range 之内设置样式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:read-write 选择器用于匹配可读及可写的元素,即没有 &quot;readonly&quot; 属性</span><br><span class="line">注意: 目前, 在大多浏览器中, :read-write 选择器只使用于设置了input 和 textarea 元素。</span><br><span class="line">:read-only 类似,匹配只读</span><br></pre></td></tr></table></figure><h3 id="JSON字符串与JSON对象"><a href="#JSON字符串与JSON对象" class="headerlink" title="JSON字符串与JSON对象"></a>JSON字符串与JSON对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var data = &#123;</span><br><span class="line">    &quot;name&quot;:&quot;wj&quot;,</span><br><span class="line">    &quot;age&quot; :&quot;25&quot;,</span><br><span class="line">    &quot;job&quot; :&quot;前端开发&quot;</span><br><span class="line">&#125;;</span><br><span class="line">// alert(data); // json对象</span><br><span class="line"></span><br><span class="line">// json对象转json字符串</span><br><span class="line">data = JSON.stringify(data);</span><br><span class="line">alert(data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// json字符串转json对象</span><br><span class="line">// 方法一:</span><br><span class="line">data = JSON.parse(data);</span><br><span class="line">alert(data);</span><br><span class="line"></span><br><span class="line">// 方法二:</span><br><span class="line">data = eval(&apos;(&apos;+data+&apos;)&apos;);</span><br><span class="line">alert(data);</span><br><span class="line"></span><br><span class="line">// 方法三:</span><br><span class="line">data = $.parseJSON(data);</span><br><span class="line">alert(data);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">window.onload 和 DOMContentLoaded 区别</span><br><span class="line"></span><br><span class="line">window.onload //页面的全部资源加载完成才会执行,包括图片、视频</span><br><span class="line"></span><br><span class="line">DOMContentLoaded // DOM 渲染完即可执行，此时图标、视频等可能还没加载完成</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">性能优化</span><br><span class="line"></span><br><span class="line">原则</span><br><span class="line">1. 多使用内存、缓存、减少CPU计算、减少网路请求</span><br><span class="line">    1.1 加载页面和静态资源：</span><br><span class="line">        1.1.1 静态资源的压缩合并：如精灵图、代码压缩</span><br><span class="line">        1.1.2 静态资源缓存：服务器设置缓存、前端设置缓存</span><br><span class="line">        1.1.3 使用CDN</span><br><span class="line"></span><br><span class="line">    1.2 页面渲染：</span><br><span class="line">        1.2.1 css放前面,js放后面：提升用户体验(js会阻塞代码运行,css使用户看到页面时就是有样式的)</span><br><span class="line">        1.2.2 懒加载(有大量图片时下拉、下拉加载更多页面内容)</span><br><span class="line">        1.2.3 减少DOM操作:查询,对DOM的查询结果做保存(for循环中的length值),插入(把for循环中的要插入值保存到一个变量中,最后一起插入)</span><br><span class="line">            var frag = document.createDocumentFragment();</span><br><span class="line">            for(let i=0; i&lt;10; i++)&#123;</span><br><span class="line">                frag.appendChild(&lt;p&gt;i&lt;/p&gt;); // 保存在文档片段中,就不会做DOM查询</span><br><span class="line">            &#125;</span><br><span class="line">            document.appendChild(frag); // 真正插入到页面中</span><br><span class="line">        1.2.4 事件节流:事件委托</span><br><span class="line">        1.2.5 尽早执行操作: 一些js代码库都是使用DOMContentLoaded来做判断的</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数中：arguments.length; //实际传参个数</span><br><span class="line">        argTest.length; //期望传参个数 argTest是函数名</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;1.盒模型&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Es6相关笔记</title>
    <link href="http://yoursite.com/2018/04/04/Es6/"/>
    <id>http://yoursite.com/2018/04/04/Es6/</id>
    <published>2018-04-04T02:29:36.574Z</published>
    <updated>2018-06-28T03:00:38.481Z</updated>
    
    <content type="html"><![CDATA[<pre><code>es6相关笔记整理</code></pre><a id="more"></a><p><img src="/images/2月/1.jpg" alt=""></p><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>1.<br>只在什么的代码块中有效</p><p>var 声明，会发生变量提升，即脚本开始运行时，变量已经存在了，但是没有值，所以会输出undefined.<br>let 声明，不会发生变量提升。这表示在声明它之前，变量是不存在的，这时如果用到它，就会抛出一个错误</p><p>另外，for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for (let i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">    let i = &apos;abc&apos;;</span><br><span class="line">    console.log(i);</span><br><span class="line">&#125;</span><br><span class="line">// abc</span><br><span class="line">// abc</span><br><span class="line">// abc</span><br><span class="line">解释：其实块级作用域里声明的let 变量不可以在块级外使用，并不是说外面的let变量不能跑到块级作用域中用，上面的父级let在子级没有什么自己的let时，用的是父级的变量，如果声明了则用自己作用域的。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var a = [];</span><br><span class="line">for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">    a[i] = function () &#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">    a[i]();   // 0,1,2,3,4,5,6,7,8,9</span><br><span class="line">&#125;</span><br><span class="line">a[6]();       // 10</span><br><span class="line"></span><br><span class="line">// 此时i始终就一个值 ,console.log(i)一直指向唯一的i,当循环完后i的值为10,</span><br><span class="line">所以a[i]函数运行的结果一直是10</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a = [];</span><br><span class="line">for (let i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">    a[i] = function () &#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[6](); // 6</span><br><span class="line"></span><br><span class="line">// 此时i只在本轮循环有效,所以每一次循环的i其实都是一个新的变量,</span><br><span class="line">let声明的变量在每一次循环中都是一个新的变量，javascript引擎会记作上一轮循环的值。</span><br></pre></td></tr></table></figure><p>存在暂时性死区:只要块级作用域内存在let,这个区域就被let声明的变量锁定了,外部的同名变量不可以在这个区域中的let变量 “前” 进行操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ES6 明确规定,如果区块中存在let和const命令,这个区块对这些命令声明的变量,</span><br><span class="line">从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量,就会报错。</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">let 声明的变量不允许重复声明, 同样不能在函数内部重新声明参数。</span><br><span class="line"></span><br><span class="line">function func() &#123; // 报错</span><br><span class="line">    let a = 10;</span><br><span class="line">    var a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function func() &#123; // 报错</span><br><span class="line">    let a = 10;</span><br><span class="line">    let a = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function func(arg) &#123;</span><br><span class="line">    let arg; // 报错</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function func(arg) &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        let arg; // 不报错</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ES6 允许块级作用域的任意嵌套。且外层作用域无法读取内层作用域的变量。</span><br><span class="line">&#123;&#123;&#123;&#123;</span><br><span class="line">&#123;let insane = &apos;Hello World&apos;&#125;</span><br><span class="line">console.log(insane); // 报错</span><br><span class="line">&#125;&#125;&#125;&#125;;</span><br></pre></td></tr></table></figure><p>2.<br>    const 声明一个只读的常量。一旦声明,常量的值就不能改变,且声明时一定要赋值。<br>    const 作用域与let命令相同：只在声明所在的块级作用域内有效。<br>    const 命令声明的常量也是不提升,同样存在暂时性死区,只能在声明的位置后面使用。<br>    const 声明的常量，也与let一样不可重复声明。<br>    const 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const foo = &#123;&#125;;</span><br><span class="line">// 为 foo 添加一个属性，可以成功</span><br><span class="line">foo.prop = 123;</span><br><span class="line">foo.prop // 123</span><br><span class="line"></span><br><span class="line">// 将 foo 指向另一个对象，就会报错</span><br><span class="line">foo = &#123;&#125;; // TypeError: &quot;foo&quot; is read-only</span><br><span class="line">上面代码中，常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。</span><br><span class="line"></span><br><span class="line">const a = [];</span><br><span class="line">a.push(&apos;Hello&apos;); // 可执行</span><br><span class="line">a.length = 0;    // 可执行</span><br><span class="line">a = [&apos;Dave&apos;];    // 报错</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;es6相关笔记整理
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="es6" scheme="http://yoursite.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>javascript常见函数</title>
    <link href="http://yoursite.com/2018/03/18/javascript%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/03/18/javascript常见函数/</id>
    <published>2018-03-18T05:59:54.530Z</published>
    <updated>2018-05-14T01:45:04.008Z</updated>
    
    <content type="html"><![CDATA[<pre><code>javascript常见函数封装</code></pre><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">    /*获取元素属性*/</span><br><span class="line">  function getStyle(obj, attr)&#123;</span><br><span class="line">        if(obj.currentStyle)</span><br><span class="line">        &#123;</span><br><span class="line">            return obj.currentStyle[attr];</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            return getComputedStyle(obj, false)[attr];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">2.</span><br><span class="line">    /*运动函数</span><br><span class="line">    *json中传入要改变的属性和要变到的具体值</span><br><span class="line">    *fnEnd是运动完后运行的函数，可不写</span><br><span class="line">    */</span><br><span class="line">   function startMove(obj, json, fnEnd)</span><br><span class="line">&#123;</span><br><span class="line">    clearInterval(obj.timer);</span><br><span class="line">    var attr;</span><br><span class="line">    obj.timer=setInterval(function ()&#123;</span><br><span class="line">        </span><br><span class="line">        var bStop=true;     //是否到了要设置的属性值</span><br><span class="line">        </span><br><span class="line">        for(attr in json)</span><br><span class="line">        &#123;</span><br><span class="line">            var iCur=0;</span><br><span class="line">            </span><br><span class="line">            //取当前位置</span><br><span class="line">            if(attr==&apos;opacity&apos;)</span><br><span class="line">            &#123;</span><br><span class="line">                iCur=parseInt(parseFloat(getStyle(obj, attr))*100);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                iCur=parseInt(getStyle(obj, attr));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            //运动速度</span><br><span class="line">            var iSpeed=(json[attr]-iCur)/8;</span><br><span class="line">//          iSpeed=iSpeed&gt;0?Math.ceil(iSpeed):Math.floor(iSpeed);</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            if(attr==&apos;opacity&apos;)</span><br><span class="line">            &#123;</span><br><span class="line">                obj.style.filter=&apos;alpha(opacity:&apos;+(iCur+iSpeed)+&apos;)&apos;;</span><br><span class="line">                obj.style.opacity=(iCur+iSpeed)/100;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                obj.style[attr]=iCur+iSpeed+&apos;px&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            if(iCur!=json[attr])</span><br><span class="line">            &#123;</span><br><span class="line">                bStop=false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if(bStop)</span><br><span class="line">        &#123;</span><br><span class="line">            clearInterval(obj.timer);</span><br><span class="line">            if(fnEnd)</span><br><span class="line">            &#123;</span><br><span class="line">                fnEnd();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 30);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">3.</span><br><span class="line">    /* 封装ajax函数</span><br><span class="line">     * @param &#123;string&#125;opt.type http连接的方式，包括POST和GET两种方式</span><br><span class="line">     * @param &#123;string&#125;opt.url 发送请求的url</span><br><span class="line">     * @param &#123;boolean&#125;opt.async 是否为异步请求，true为异步的，false为同步的</span><br><span class="line">     * @param &#123;object&#125;opt.data 发送的参数，格式为对象类型</span><br><span class="line">     * @param &#123;function&#125;opt.success ajax发送并接收成功调用的回调函数</span><br><span class="line">     */</span><br><span class="line">    function ajax(opt) &#123;</span><br><span class="line">        opt = opt || &#123;&#125;;</span><br><span class="line">        opt.method = opt.method.toUpperCase() || &apos;POST&apos;;</span><br><span class="line">        opt.url = opt.url || &apos;&apos;;</span><br><span class="line">        opt.async = opt.async || true;</span><br><span class="line">        opt.data = opt.data || null;</span><br><span class="line">        opt.success = opt.success || function () &#123;&#125;;</span><br><span class="line">        var xmlHttp = null;</span><br><span class="line">        if (window.XMLHttpRequest) &#123;</span><br><span class="line">            xmlHttp = new XMLHttpRequest();</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            xmlHttp = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        var params = [];</span><br><span class="line">        for (var key in opt.data)&#123;</span><br><span class="line">            params.push(key + &apos;=&apos; + opt.data[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        var postData = params.join(&apos;&amp;&apos;);</span><br><span class="line">        if (opt.method.toUpperCase() === &apos;POST&apos;) &#123;</span><br><span class="line">            xmlHttp.open(opt.method, opt.url, opt.async);</span><br><span class="line">            xmlHttp.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded;charset=utf-8&apos;);</span><br><span class="line">            xmlHttp.send(postData);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (opt.method.toUpperCase() === &apos;GET&apos;) &#123;</span><br><span class="line">            xmlHttp.open(opt.method, opt.url + &apos;?&apos; + postData, opt.async);</span><br><span class="line">            xmlHttp.send(null);</span><br><span class="line">        &#125; </span><br><span class="line">        xmlHttp.onreadystatechange = function () &#123;</span><br><span class="line">            if (xmlHttp.readyState == 4 &amp;&amp; xmlHttp.status == 200) &#123;</span><br><span class="line">                opt.success(xmlHttp.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">/*例*/</span><br><span class="line">        ajax(&#123;</span><br><span class="line">                method: &apos;GET&apos;,</span><br><span class="line">                url: &apos;http://www.baidu.com&apos;,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    user: &apos;wujun&apos;,</span><br><span class="line">                    password: &apos;123&apos;</span><br><span class="line">                &#125;,</span><br><span class="line">                success: function(response) &#123;</span><br><span class="line">                    console.log(response);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">4.</span><br><span class="line">    /*非jquery addclass hasclass removeclass toggleclass*/</span><br><span class="line">    function hasClass(obj, cls) &#123;  </span><br><span class="line">        return obj.className.match(new RegExp(&apos;(\\s|^)&apos; + cls + &apos;(\\s|$)&apos;));  </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    function addClass(obj, cls) &#123;  </span><br><span class="line">        if (!this.hasClass(obj, cls)) obj.className += &quot; &quot; + cls;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    function removeClass(obj, cls) &#123;  </span><br><span class="line">        if (hasClass(obj, cls)) &#123;  </span><br><span class="line">            var reg = new RegExp(&apos;(\\s|^)&apos; + cls + &apos;(\\s|$)&apos;);  </span><br><span class="line">            obj.className = obj.className.replace(reg, &apos; &apos;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    function toggleClass(obj,cls)&#123;  </span><br><span class="line">        if(hasClass(obj,cls))&#123;  </span><br><span class="line">            removeClass(obj, cls);  </span><br><span class="line">        &#125;else&#123;  </span><br><span class="line">            addClass(obj, cls);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    function toggleClassTest()&#123;  </span><br><span class="line">        var obj = document. getElementById(&apos;test&apos;);  </span><br><span class="line">        toggleClass(obj,&quot;testClass&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"> 5.原生获取class</span><br><span class="line">    function getByClass(oParent,sClass)&#123;</span><br><span class="line">        var aEle=oParent.getElementsByTagName(sClass);</span><br><span class="line">        var aResult=[];</span><br><span class="line">        var reg=RegExp(&apos;\\b&apos;+sClass+&apos;\\b&apos;);</span><br><span class="line">        for(var i=0;i&lt;aEle.length;i++)&#123;</span><br><span class="line">            if(reg.test(aEle[i].className))</span><br><span class="line">            &#123;</span><br><span class="line">                aResult.push(aEle[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return aResult;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">//鼠标事件</span><br><span class="line">onclick       鼠标点击(onclick是在鼠标点击弹起之后触发的事件，即一次完整的鼠标点击过程。过程完成瞬间触发函数)</span><br><span class="line">onmouseover   鼠标移入目标上方(移入时触发一次)</span><br><span class="line">onmouseout    鼠标移出目标上方</span><br><span class="line"></span><br><span class="line">onmousemove   鼠标在目标上方移动(在目标上移动,不停触发)</span><br><span class="line">onmousedown   鼠标按钮被按下(在鼠标按键按下去的瞬间触发)</span><br><span class="line">onmouseup     鼠标按钮抬起</span><br><span class="line"></span><br><span class="line">ondblclick    鼠标双击</span><br><span class="line">oncontextmenu 鼠标右键单击弹出菜单</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//键盘事件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//系统事件</span><br><span class="line">onload   加载完在执行</span><br><span class="line"></span><br><span class="line">//表单事件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//函数  运行</span><br><span class="line">function abc()&#123;</span><br><span class="line">    </span><br><span class="line">&#125; 此时不运行</span><br><span class="line"></span><br><span class="line">1.直接调用:abc()</span><br><span class="line">2.事件调用:oDiv.onclick=abc;  //切记没括号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">innerHtml:有一些问题</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">oBtn.style.fontSize=num+&apos;px&apos;//这里的px不要丢了,有些浏览器不支持</span><br><span class="line">oBtn.style.fontSize=&apos;300px&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//不要拿来做判断的有:</span><br><span class="line">1.所有的相对路径都别拿来做判断</span><br><span class="line">2.颜色值</span><br><span class="line">3.innerHtml值不要拿来做判断    ??????</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//oDiv.style.float=&apos;left&apos;;不支持</span><br><span class="line">  oDiv.style.styleFloat=&apos;left&apos;;//IE</span><br><span class="line">  oDiv.style.cssFloat=&apos;left&apos;;//非IE</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"> filter:alpha(opacity:90); </span><br><span class="line"> opacity:0.9;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//document.getElementById()  静态方法  前面只能跟document</span><br><span class="line">//document.getElementByTagName() 动态方法 得到的是一个类数组  前面document可以是别的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function getByClass(oParent,sClass)&#123;</span><br><span class="line">    var aEle=oParent.getElementsByTagName(&apos;*&apos;);</span><br><span class="line">    var aResult=[];</span><br><span class="line">    var reg=RegExp(&apos;\\b&apos;+sClass+&apos;\\B&apos;);</span><br><span class="line">    if(reg.test(aEle[i].className))</span><br><span class="line">    &#123;</span><br><span class="line">        aResult.push(aEle[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return aResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//事件捕获</span><br><span class="line">ie:obj.attachEvent(事件名称onclick,事件函数)</span><br><span class="line">标准:obj.addEventListener(事件名称click,事件函数)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//oDiv.style.cssText = &apos; width:200px; height:200px; &apos;;</span><br><span class="line">oDiv.style.cssText = &apos;&apos;;//清空后样式变成样式表中的样式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">伪类选择元素基于的是当前元素处于的状态，或者说元素当前所具有的特性，而不是元素的id、class、属性等静态的标志。由于状态是动态变化的，所以一个元素达到一个特定状态时，它可能得到一个伪类的样式；当状态改变时，它又会失去这个样式。由此可以看出，它的功能和class有些类似，但它是基于文档之外的抽象，所以叫伪类。</span><br><span class="line"></span><br><span class="line">与伪类针对特殊状态的元素不同的是，伪元素是对元素中的特定内容进行操作，它所操作的层次比伪类更深了一层，也因此它的动态性比伪类要低得多。实际上，设计伪元素的目的就是去选取诸如元素内容第一个字（母）、第一行，选取某些内容前面或后面这种普通的选择器无法完成的工作。它控制的内容实际上和元素是相同的，但是它本身只是基于元素的抽象，并不存在于文档中，所以叫伪元素。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;javascript常见函数封装
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>代码规范</title>
    <link href="http://yoursite.com/2018/03/17/js%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/03/17/js注释规范/</id>
    <published>2018-03-17T11:42:49.551Z</published>
    <updated>2018-04-04T03:01:16.610Z</updated>
    
    <content type="html"><![CDATA[<pre><code>js相关规范</code></pre><a id="more"></a><p><img src="/images/2月/1.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  这里的注释内容【会】被压缩工具压缩</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*!</span><br><span class="line"> * 这里的注释内容【不会】被压缩工具压缩</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @auhor       作者</span><br><span class="line"> * @version     版本号</span><br><span class="line"> * @param       参数</span><br><span class="line"> * @return      返回值</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*!</span><br><span class="line"> * [testFunction description]</span><br><span class="line"> * @param  &#123;[type]&#125; a [description]</span><br><span class="line"> * @param  &#123;[type]&#125; b [description]</span><br><span class="line"> * @param  &#123;[type]&#125; c [description]</span><br><span class="line"> * @return &#123;[type]&#125;   [description]</span><br><span class="line"> */</span><br><span class="line">function testFunction(a, b, c) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// TODO 未处理IE6-8的兼容性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*reset*/</span><br><span class="line"></span><br><span class="line">@charset &quot;utf-8&quot;;</span><br><span class="line">/* CSS Document */</span><br><span class="line">body,ul,ol,li,p,h1,h2,h3,h4,h5,h6,form,fieldset,table,td,img,div,dl,dt,dd,input&#123;margin:0;padding:0;&#125;</span><br><span class="line">body&#123;font-size:12px;&#125;</span><br><span class="line">img&#123;border:none;&#125;</span><br><span class="line">li&#123;list-style:none;&#125;</span><br><span class="line">input,select,textarea&#123;outline:none;border:none; background:none;&#125;</span><br><span class="line">textarea&#123;resize:none;&#125;</span><br><span class="line">a&#123;text-decoration:none; color:#656565;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*清浮动*/</span><br><span class="line">.clearfix:after&#123;</span><br><span class="line">    content:&quot;&quot;;</span><br><span class="line">    display:block;</span><br><span class="line">    clear:both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix&#123;</span><br><span class="line">    zoom:1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.fl&#123;</span><br><span class="line">    float:left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.fr&#123;</span><br><span class="line">    float:right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// JavaScript Document  使用DD_belatedPNG让IE6支持PNG透明图片</span><br><span class="line">DD_belatedPNG.fix(&apos;div,ul,ol,li,dt,dd,dl,span,img,a,em,strong,h1,h2,h3,h4,h5,h6,p&apos;);</span><br><span class="line">//尽量少偷懒，不要用*，性能是很低的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReferenceError //引用错误</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;js相关规范
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="规范" scheme="http://yoursite.com/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>网页宽高设置</title>
    <link href="http://yoursite.com/2018/03/14/js%E5%AE%BD%E9%AB%98%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/03/14/js宽高设置/</id>
    <published>2018-03-14T03:40:30.332Z</published>
    <updated>2018-06-21T08:20:48.270Z</updated>
    
    <content type="html"><![CDATA[<pre><code>网页元素宽高设置</code></pre><a id="more"></a><h4 id="居中不跳动："><a href="#居中不跳动：" class="headerlink" title="居中不跳动："></a>居中不跳动：</h4><p>100vw相对于浏览器的window.innerWidth，是浏览器的内部宽度，注意，滚动条宽度也计算在内！而100%是可用宽度，是不含滚动条的宽度。</p><p>于是，calc(100vw - 100%)就是浏览器滚动条的宽度大小,margin-left: calc(100vw - 100%)使两边都有滚动条（如果有的话）</p><h5 id="居中不跳动最佳实践"><a href="#居中不跳动最佳实践" class="headerlink" title="居中不跳动最佳实践"></a>居中不跳动最佳实践</h5><p>TODO 暂时先这样，感觉也有问题，当缩小浏览器时横向滚动条不能滚动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">html &#123;</span><br><span class="line">  overflow-y: scroll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:root &#123;</span><br><span class="line">  overflow-y: auto;</span><br><span class="line">  overflow-x: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:root body &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">  width: 100vw;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>js在处理小数时会出现问题：如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a=3;</span><br><span class="line">var b=3.00000000000000000001;</span><br><span class="line">alert(a==b);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a标签：link visited hover active</span><br><span class="line"></span><br><span class="line">Math.max();</span><br></pre></td></tr></table></figure><h3 id="事件相关"><a href="#事件相关" class="headerlink" title="事件相关"></a>事件相关</h3><p>oEvent=ev||event;<br>event是事件对象(也是window的属性)，但不是标准的，只有IE支持。<br>在W3C标准支持的浏览器下事件对象是引发事件函数的第一个参数，参数名随意。<br>var oEvent = ev || event;</p><p>在IE中执行var oEvent = ev || event;时，ev为undefined，即为false，而event为true。所以返回的是它所支持的event。在其他浏览器中，第一个ev为true，直接返回，不用理会后面的event。<br>而反过来写，var oEvent = event || ev;<br>IE下不会报错，直接返回第一个为true的event<br>但在其他浏览器中，firefox   event没有被定义，直接报错。</p><p>event事件：在js中，对于元素的运动的操作通常都会涉及到event对象，而event对象也存在很多位置属性，且由于浏览器兼容性问题会导致这些属性间相互混淆，这里一一讲解。<br>clientX和clientY，这对属性是当事件发生时，鼠标点击位置相对于浏览器（可视区）的坐标，即浏览器左上角坐标的（0,0），该属性以浏览器左上角坐标为原点，计算鼠标点击位置距离其左上角的位置</p><p>screenX和screenY是事件发生时鼠标相对于屏幕(当浏览器窗口缩小时，它也是相对屏幕)的坐标，以设备屏幕的左上角为原点，事件发生时鼠标点击的地方即为该点的screenX和screenY值</p><p>pageX和pageY: 顾名思义，该属性是事件发生时鼠标点击位置相对于页面的位置，通常浏览器窗口没有出现滚动条时，该属性和event.clientX及event.clientY是等价的，但是当浏览器出现滚动条的时候，pageX通常会大于clientX，因为页面还存在被卷起来的部分的宽度和高度由于浏览器出现了垂直和水平的滚动条，所以pageX和pageY大于clientX和clientY。当浏览器的滚动条没有被拖动或者浏览器没有滚动条的时候，两者是相等的。</p><p>只读属性<br>offsetLeft和offsetTop:说到这对属性就需要说下offsetParent,所谓offsetParent指的是当前元素的离自己最近的具有定位的（position:absolute或者position：relative）父级元素（不仅仅指的是直接父级元素，只要是它的父元素都可以），该父级元素就是当前元素的offsetParent，如果从该元素向上寻找，找不到这样一个父级元素，那么当前元素的offsetParent就是body元素。而offsetLeft和offsetTop指的是当前元素，相对于其offsetParent左边距离和上边距离，即当前元素的border到包含它的offsetParent的border的距离(要加上offsetParsent的border宽度)</p><p>clientWidth和clientHeight: 该属性指的是元素的可视部分宽度和高度，即padding+content，如果没有滚动条，即为元素设定的高度和宽度，如果出现滚动条，滚动条会遮盖元素的宽高，那么该属性就是其本来宽高减去滚动条的宽高(各浏览器的滚动条宽度是17px)</p><p>offsetWidth和offsetHeight: 这一对属性指的是元素的border+padding+content的宽度和高度，该属性和其内部的内容是否超出元素大小无关，只和本来设定的border以及width和height有关</p><p>oEvent.ctrlKey而不是oEvent.keyCode==17</p><p>document.documentElement和document.body<br>对于这两个元素的使用一般是以下两种情况</p><p>clientWidth和clientHeight</p><p>scrollWidth,scrollHeight,scrollLeft,scrollTop</p><p>现在假设每个属性的意思你都明白</p><p>对于ie7以上和火狐:<br>通过document.documentElement都可以取到标准属性,</p><p>对于ie6:<br>则要通过document.body才能都取到正确的属性</p><p>对于chrome<br>是用区别的</p><p>通过document.documentElement  clientWidth和clientHeight,scrollWidth,scrollHeight都可以取到正确的属性</p><p>但对于scrollLeft,scrollTop,只有通过document.body才能取到正确的属性</p><p>但通过document.body的话,都是可以取到正确的属性,这点和ie6一样</p><p>最后要说的是,取不到正确值,不是undefined,而是要么是0,要么是都等于窗口大小,这个不重要,不提也罢</p><p>最后说解决方案</p><p>如果不要求ie6:</p><p>除了scrollTop,scrollLeft  都要用document.documentElement来取,</p><p>如果涉及到scrollTop,scrollLeft(照顾chrome),这两个属性要用document.body来取了</p><p>如果要求ie6:</p><p>那就都要取document.body取到的值和document.documentElement取到的值的最大值了</p><p>oEvent.cancelBubble=true;</p><p>oImg.style.filter=’alpha(opacity:’+alpha+’)’;<br>oImg.style.opacity=alpha/100;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://www.jianshu.com/p/855d3db86b5e</span><br><span class="line"></span><br><span class="line">TODO 测试有问题</span><br><span class="line"></span><br><span class="line">offsetX和offsetY: 这一对属性是指当事件发生时，鼠标点击位置相对于该事件源的位置，即点击该div，以该div左上角为原点来计算鼠标点击位置的坐标 。需要注意的是，IE，chrome，opera都支持该属性，唯独Firefox不支持该属性，Firefox中与此属性相对应的概念是，event.layerX和event.layerY,所以需要兼容浏览器时，获取鼠标点击。位置相对于事件源的坐标的兼容写法为var disX=event.offsetX||event.layerX.</span><br></pre></td></tr></table></figure><p>background-position 属性改变图像在背景中的位置:<br>background-attachment 背景图像是否固定或者随着页面的其余部分滚动。</p><p>ID属性不要以数字开头，数字开头的ID在 Mozilla/Firefox 浏览器中不起作用。<br> 类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用。</p><p> 如果外部样式放在内部样式的后面，则外部样式将覆盖内部样式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line">  //文本转换属性是用来指定在一个文本中的大写和小写字母</span><br><span class="line">  p.uppercase &#123;text-transform:uppercase;&#125;  </span><br><span class="line">  p.lowercase &#123;text-transform:lowercase;&#125;</span><br><span class="line">  p.capitalize &#123;text-transform:capitalize;&#125;</span><br><span class="line"></span><br><span class="line">  //指定字符之间的空间</span><br><span class="line">  letter-spacing:2px;</span><br><span class="line">  </span><br><span class="line">  //增加单词之间的空白空间</span><br><span class="line">  word-spacing:30px;</span><br><span class="line"></span><br><span class="line">  //在元素内禁用文字环绕 ,不换行</span><br><span class="line">  white-space:nowrap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  vertical-align:text-top;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  text-shadow:2px 2px #FF0000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  unicode-bidi:bidi-override;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  //如果字体系列的名称超过一个字，它必须用引号，如Font Family：&quot;宋体&quot;。</span><br><span class="line">  font-family:&quot;Times New Roman&quot;, Times, serif;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  p.normal &#123;font-style:normal;&#125;</span><br><span class="line">  p.italic &#123;font-style:italic;&#125;</span><br><span class="line">  p.oblique &#123;font-style:oblique;&#125; //倾斜的文字 - 文字向一边倾斜（和斜体非常类似，但不太支持）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  font-weight:lighter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  font-variant:small-caps;//把段落设置为小型大写字母字体：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  font 简写属性在一个声明中设置所有字体属性。</span><br><span class="line">可设置的属性是（按顺序）： &quot;font-style font-variant font-weight font-size/line-height font-family&quot;font-size和font-family的值是必需的。如果缺少了其他值，默认值将被插入，如果有默认值的话。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">border-collapse:collapse; 属性设置表格的边框是否被折叠成一个单一的边框或隔开：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">border-color单独使用是不起作用的，必须得先使用border-style来设置边框样式。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">轮廓（outline）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</span><br><span class="line"></span><br><span class="line">轮廓（outline）属性指定元素轮廓的样式、颜色和宽度。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">max-height:50px;</span><br><span class="line"></span><br><span class="line">min-height:100px;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">visibility:hidden</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clip:rect(0px,70px,200px,0px);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">someNode.childNodes得到的是一个NodeList</span><br><span class="line">someNode.childNodes[0]</span><br><span class="line">someNode.childNodes.item(0)</span><br><span class="line">原生对元素中间的空格处理不好</span><br><span class="line"></span><br><span class="line">appendChild()</span><br><span class="line">someNode.appendChild(newNode)操作的是someNode的子节点,添加一个新节点在子元素的最后，如果newNode是在子节点的取得的，则是移动节点到最后。</span><br><span class="line"></span><br><span class="line">someNode.insertBefore(newNode,null)也是操作someNode的子节点,null是原节点，如someNode.firstChild</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. 替换：someNode.replaceChild(newNode,someNode.firstChild)</span><br><span class="line"></span><br><span class="line">5. 删除：someNode.removeChild(someNode.firstChild)</span><br><span class="line"></span><br><span class="line">6. cloneNode()操作的是创建调用这个方法的一个完全相同的副本，true深复制（包括子节点),不会复制事件，但ie会，</span><br><span class="line"></span><br><span class="line">7. normalize()处理文档的文本节点，删除空白，合并两个文本节点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8.  document.documentElement;取得的是&lt;html&gt;&lt;/html&gt;元素的引用，document.firstChild   document.childNodes[0]都是一样的</span><br><span class="line"></span><br><span class="line">9.  document.body.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">10. document.title 可读可写</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">11. document.URL  </span><br><span class="line">    document.domain</span><br><span class="line">    document.referrer 来源页面的urlhh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">12. document.forms</span><br><span class="line">    document.links</span><br><span class="line">    document.anchors </span><br><span class="line">    document.images</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意: 如果没有设置 width 属性(或者设置 100%)，居中对齐将不起作用。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">垂直居中 - 使用 line-height</span><br><span class="line">/* 如果文本有多行，在父元素上设置line-height*/</span><br><span class="line">.center &#123;</span><br><span class="line">    line-height: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    border: 3px solid green;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.center p &#123;</span><br><span class="line">    line-height: 1.5;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//垂直居中</span><br><span class="line">.center &#123; </span><br><span class="line">    height: 200px;</span><br><span class="line">    position: relative;</span><br><span class="line">    border: 3px solid green; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.center p &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">后代选取器(以空格分隔)</span><br><span class="line">子元素选择器(以大于号分隔）</span><br><span class="line">&lt;strong&gt;相邻&lt;/strong&gt;兄弟选择器（以加号分隔）</span><br><span class="line">普通兄弟选择器（以破折号分隔）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1.Reset css:</span><br><span class="line">/*</span><br><span class="line">KISSY CSS Reset</span><br><span class="line">理念：清除和重置是紧密不可分的</span><br><span class="line">特色：1.适应中文 2.基于最新主流浏览器</span><br><span class="line">维护：玉伯(lifesinger@gmail.com), 正淳(ragecarrier@gmail.com)</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/* 清除内外边距 */</span><br><span class="line">body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, /* structural elements 结构元素 */</span><br><span class="line">dl, dt, dd, ul, ol, li, /* list elements 列表元素 */</span><br><span class="line">pre, /* text formatting elements 文本格式元素 */</span><br><span class="line">fieldset, lengend, button, input, textarea, /* form elements 表单元素 */</span><br><span class="line">th, td &#123; /* table elements 表格元素 */</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 设置默认字体 */</span><br><span class="line">body,</span><br><span class="line">button, input, select, textarea &#123; /* for ie */</span><br><span class="line">    /*font: 12px/1 Tahoma, Helvetica, Arial, &quot;宋体&quot;, sans-serif;*/</span><br><span class="line">    font: 12px/1 Tahoma, Helvetica, Arial, &quot;\5b8b\4f53&quot;, sans-serif; /* 用 ascii 字符表示，使得在任何编码下都无问题 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1 &#123; font-size: 18px; /* 18px / 12px = 1.5 */ &#125;</span><br><span class="line">h2 &#123; font-size: 16px; &#125;</span><br><span class="line">h3 &#123; font-size: 14px; &#125;</span><br><span class="line">h4, h5, h6 &#123; font-size: 100%; &#125;</span><br><span class="line"></span><br><span class="line">address, cite, dfn, em, var &#123; font-style: normal; &#125; /* 将斜体扶正 */</span><br><span class="line">code, kbd, pre, samp, tt &#123; font-family: &quot;Courier New&quot;, Courier, monospace; &#125; /* 统一等宽字体 */</span><br><span class="line">small &#123; font-size: 12px; &#125; /* 小于 12px 的中文很难阅读，让 small 正常化 */</span><br><span class="line"></span><br><span class="line">/* 重置列表元素 */</span><br><span class="line">ul, ol &#123; list-style: none; &#125;</span><br><span class="line"></span><br><span class="line">/* 重置文本格式元素 */</span><br><span class="line">a &#123; text-decoration: none; &#125;</span><br><span class="line">a:hover &#123; text-decoration: underline; &#125;</span><br><span class="line"></span><br><span class="line">abbr[title], acronym[title] &#123; /* 注：1.ie6 不支持 abbr; 2.这里用了属性选择符，ie6 下无效果 */</span><br><span class="line">    border-bottom: 1px dotted;</span><br><span class="line">    cursor: help;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">q:before, q:after &#123; content: &apos;&apos;; &#125;</span><br><span class="line"></span><br><span class="line">/* 重置表单元素 */</span><br><span class="line">legend &#123; color: #000; &#125; /* for ie6 */</span><br><span class="line">fieldset, img &#123; border: none; &#125; /* img 搭车：让链接里的 img 无边框 */</span><br><span class="line">/* 注：optgroup 无法扶正 */</span><br><span class="line">button, input, select, textarea &#123;</span><br><span class="line">    font-size: 100%; /* 使得表单元素在 ie 下能继承字体大小 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 重置表格元素 */</span><br><span class="line">table &#123;</span><br><span class="line">    border-collapse: collapse;</span><br><span class="line">    border-spacing: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 重置 hr */</span><br><span class="line">hr &#123;</span><br><span class="line">    border: none;</span><br><span class="line">    height: 1px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 让非ie浏览器默认也显示垂直滚动条，防止因滚动条引起的闪烁 */</span><br><span class="line">html &#123; overflow-y: scroll; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">清除内外边距的元素，去掉了 div, code（在测试浏览器中，没发现有边距）, 增加了 button（感觉是 YUI 遗漏了）. </span><br><span class="line">去掉了 YUI 里对 html 颜色和背景色的设置。在测试浏览器中，没有发现差异。（要设的话，推荐background: transparent） </span><br><span class="line">对于 address, caption, …, em, strong 等文本格式元素，做了调整。保留了 strong 和 th 的粗体。 </span><br><span class="line">对 abbr 和 acronym 做了调整，使得在非 ie6 下可视性更好。 </span><br><span class="line">去掉了 sup 和 sub 的样式，直接用浏览器默认的即可。 </span><br><span class="line">对于 input, select, textarea 表单元素，去掉了针对 ie 的 inherit, 只保留了 font-size 的 inherit hack. 因为其它 hack 经测试已失效。 </span><br><span class="line">增加了一些元素的默认样式。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line"></span><br><span class="line">readonly=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">伪类选择元素基于的是当前元素处于的状态，或者说元素当前所具有的特性，而不是元素的id、class、属性等静态的标志。由于状态是动态变化的，所以一个元素达到一个特定状态时，它可能得到一个伪类的样式；当状态改变时，它又会失去这个样式。由此可以看出，它的功能和class有些类似，但它是基于文档之外的抽象，所以叫伪类。</span><br><span class="line"></span><br><span class="line">与伪类针对特殊状态的元素不同的是，伪元素是对元素中的特定内容进行操作，它所操作的层次比伪类更深了一层，也因此它的动态性比伪类要低得多。实际上，设计伪元素的目的就是去选取诸如元素内容第一个字（母）、第一行，选取某些内容前面或后面这种普通的选择器无法完成的工作。它控制的内容实际上和元素是相同的，但是它本身只是基于元素的抽象，并不存在于文档中，所以叫伪元</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">2. jsx其实就是javascript对象</span><br><span class="line"></span><br><span class="line">3. ReactDOM.render 功能就是把组件渲染并且构造DOM树，然后插入到页面上某个特定元素上。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">所有未定义直接赋值的变量属于全局作用域,不推荐使用</span><br><span class="line"></span><br><span class="line">直接赋值不是一种声明方式。这仅仅是在全局对象上创建了新的属性（而不是变量）</span><br><span class="line"></span><br><span class="line">变量不能删除（delete），属性可以删除</span><br><span class="line"></span><br><span class="line">在JavaScript引擎解析JavaScript代码的时候，首先，JavaScript引擎会把变量和函数的声明提前进</span><br><span class="line">行预解析，然后再去执行其他代码。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">函数的生命周期:</span><br><span class="line">函数的的生命周期分为创建和执行两个阶段。</span><br><span class="line">在函数创建阶段，JS解析引擎进行预解析，会将函数声明提前，同时将该函数放到全局作用域中或</span><br><span class="line">当前函数的上一级函数的局部作用域中。</span><br><span class="line">在函数执行阶段，JS引擎会将当前函数的局部变量和内部函数进行声明提前，然后再执行业务代</span><br><span class="line">码，当函数执行完退出时，释放该函数的执行上下文，并注销该函数的局部变量。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JavascriptAPI:</span><br><span class="line">1.Math.abs(-5.3)// abs返回整形数据的绝对值</span><br><span class="line">2.Math.round(x)//返回离x最近的一个整数</span><br><span class="line">3.Math.ceil(x)// 方法可对一个数进行上舍入</span><br><span class="line">4.Math.floor(x)//向下取整</span><br><span class="line">5.Boolean() //调用转型函数，变成bool类型</span><br><span class="line">6.isFinite()//在最小值和最大值之间会返回true</span><br><span class="line">7.isNaN()  //会尝试转换，如不能则返回true。</span><br><span class="line">8.Number()</span><br><span class="line">9.parseInt()</span><br><span class="line">10.parseFloat()</span><br><span class="line">11.toString()//age.toString()</span><br><span class="line">杂乱无章：</span><br><span class="line">1.Reset css: 清扫差异和重置默认样式结合起来。“*” 导致CSS渲染引擎在渲染CSS的时候，使用*遍历整个DOM 树，影响性能渲染性能。</span><br><span class="line">2.typeof：以字符串的形式返回变量的原始类型</span><br><span class="line">typeof在两种情况下会返回&quot;undefined&quot;:一个变量没有被声明的时候,和一个变量的值是undefined的时候，注意，typeof null也会返回object，大多数的对象类型（数组Array、时间Date等）也会返回object</span><br><span class="line">contructor：一个属性，返回对创建此对象的数组函数的引用</span><br><span class="line">instanceof：运算符，用来在运行时指出对象是否是特定类的一个实例，找到则返回true，否则返回false</span><br><span class="line">3.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">clientTop和clientLeft: 这一对属性是用来读取元素的top和left的border的宽度</span><br><span class="line"></span><br><span class="line">scrollHeight和scrollWidth: 顾名思义，这两个属性指的是当元素内部的内容超出其宽度和高度的时候，元素内部内容的实际宽度和高度，需要注意的是，当元素其中内容没有超过其高度或者宽度的时候，该属性是取不到的。</span><br><span class="line">可读可写属性：所谓的可读可写属性指的是不仅能通过js获取该属性的值，还能够通过js为该属性赋值。</span><br><span class="line">scrollTop和scrollLeft: 这对属性是可读写的，指的是当元素其中的内容超出其宽高的时候，元素被卷起的高度和宽度。</span><br><span class="line">obj.style.*属性：对于一个dom元素，它的style属性返回的是一个对象，这个对象中的任意一个属性是可读写的。如obj.style.top,obj.style.wdith等，在读的时候，他们返回的值常常是带有单位的(如px),同时，对于这种方式，它只能够获取到该元素的行内样式，而并不能获取到该元素最终计算好的样式，这就是在读取属性值的时候和以上只读属性的区别，要获取计算好的样式，请使用obj.currentstyle（IE）和getComputedStyle(IE之外的浏览器)。另一方面，这些属性能够被赋值，js运动的原理就是通过不断修改这些属性的值而达到其位置改变的，需要注意的是，给这些属性赋值的时候需要带单位的要带上单位，否则不生效。(getComputedStyle也要减去侧边滚动条宽度,currentStyle不用减）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">伪类的操作对象是文档树中已有的元素，而伪元素则创建了一个文档数外的元素。因此，伪类与伪元素的区别在于：有没有创建一个文档树之外的元素。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CSS3规范中的要求使用双冒号(::)表示伪元素，以此来区分伪元素和伪类，比如::before和::after等伪元素使用双冒号(::)，:hover和:active等伪类使用单冒号(:)。除了一些低于IE8版本的浏览器外，大部分浏览器都支持伪元素的双冒号(::)表示方法。</span><br><span class="line"></span><br><span class="line">然而，除了少部分伪元素，如::backdrop必须使用双冒号，大部分伪元素都支持单冒号和双冒号的写法，比如::after，写成:after也可以正确运行。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;网页元素宽高设置
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git 配置及相关命令</title>
    <link href="http://yoursite.com/2018/02/01/git%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/02/01/git配置及相关命令/</id>
    <published>2018-02-01T01:10:13.000Z</published>
    <updated>2018-07-26T06:17:44.646Z</updated>
    
    <content type="html"><![CDATA[<pre><code>从git安装到电脑后的配置步骤,及一下git常用命令</code></pre><a id="more"></a><p><img src="/images/2月/1.jpg" alt=""></p><h2 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h2><h3 id="一、生成SSH密钥过程："><a href="#一、生成SSH密钥过程：" class="headerlink" title="一、生成SSH密钥过程："></a>一、生成SSH密钥过程：</h3><p>1.查看是否已经有了ssh密钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh   //在gitbash中运行 </span><br><span class="line">或者直接进入 C:\Users\wj\.ssh 目录查看</span><br></pre></td></tr></table></figure><p>如果没有密钥则不会有此文件夹，有则备份删除</p><p>2.生成密钥：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C “****@189.cn”   //按3次回车，密码为空</span><br></pre></td></tr></table></figure></p><p>Your identification has been saved in /home/tekkub/.ssh/id_rsa.<br>Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>………………<br>最后得到了两个文件：id_rsa和id_rsa.pub</p><p>3.添加密钥到ssh：ssh-add 文件名<br>需要之前输入密码。<br>把专用密钥添加到 ssh-agent 的高速缓存中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p><p>如果在使用shh-add的时候提示：<br>Could not open a connection to your authentication agent.<br>则需手动开启ssh，如下；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval `ssh-agent -s`</span><br></pre></td></tr></table></figure></p><p>再次执行ssh-add即可</p><p>4.在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。<br>打开<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> ，登陆github账号，然后添加ssh。</p><p>5.测试：ssh <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.<br>ERROR: Hi tekkub! You’ve successfully authenticated, but GitHub does not provide shell access<br>Connection to github.com closed.</p><p>6.加快clone的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">151.101.72.249 http://global-ssl.fastly.Net 192.30.253.112 http://github.com    //添加的hostsC:\Windows\System32\drivers\etc\hosts</span><br></pre></td></tr></table></figure></p><h3 id="二：git命令"><a href="#二：git命令" class="headerlink" title="二：git命令"></a>二：git命令</h3><p>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">touch readme.txt    //创建.txt文件（任意文件后缀）</span><br><span class="line">mkdir text          //创建 text文件夹</span><br><span class="line"></span><br><span class="line">cd ..               //退出当前文件夹</span><br><span class="line">cd ./               //当前目录</span><br><span class="line">cd /                //退出到跟目录</span><br></pre></td></tr></table></figure><p>Git的设置文件为.gitconfig 具体怎么配置？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --list           //显示当前的Git配置</span><br><span class="line">git config -e --global      //编辑Git配置文件</span><br><span class="line"> </span><br><span class="line">git config --global user.name &quot;[name]&quot;   //设置提交代码时的用户信息</span><br><span class="line">git config --global user.email &quot;[email address]&quot; //设置提交代码时的用户信息</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pwd                 //显示当前目录</span><br><span class="line">ls                  //查看有什么文件</span><br><span class="line">如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">初始化仓库</span><br><span class="line">git init  </span><br><span class="line">git init 项目名（创建后里面有.git文件）</span><br><span class="line"></span><br><span class="line">git add .    //添加所有文件到暂存区</span><br><span class="line">git add      // 添加指定文件到暂存区</span><br><span class="line"></span><br><span class="line">git commit -m &quot;文件说明&quot;   提交到版本库中(本地仓库)</span><br><span class="line">git commit -v  //提交时显示所有diff信息</span><br><span class="line">git commit --amend -m [message]  //使用一次新的commit，替代上一次提交</span><br><span class="line">如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git remote add origin &quot;具体github仓库&quot;  //需要提前在git上创建好</span><br><span class="line"></span><br><span class="line">git push -u origin master    //本地仓库把推送到远程仓库</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev //新建并切换到dev分支</span><br><span class="line"></span><br><span class="line">等价于：</span><br><span class="line"></span><br><span class="line">git branch dev   //新建分支</span><br><span class="line">git checkout dev //切换分支</span><br><span class="line">git checkout -   //切换到上一个分支</span><br><span class="line"></span><br><span class="line">git branch       //查看分支：</span><br><span class="line">git branch -r    //查看远程分支</span><br><span class="line">git branch -a    //列出所有本地分支和远程分支</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git merge dev    //将次分支合并到当前分支上面</span><br><span class="line">git branch -d dev //删除分支</span><br><span class="line"></span><br><span class="line">删除远程分支</span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br><span class="line"></span><br><span class="line">git clone &quot;***&quot;       //不指定分支拉代码</span><br><span class="line">git clone -b dev &quot;***&quot; //指定分支拉代码</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log    //显示提交记录  可加参数   --pretty=oneline</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status   //显示有变更的文件</span><br><span class="line">git diff     //显示暂存区和工作区的差异</span><br><span class="line">git diff --cached [file]  //显示暂存区和上一个commit的差异</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;从git安装到电脑后的配置步骤,及一下git常用命令
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git 工具" scheme="http://yoursite.com/tags/git-%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
